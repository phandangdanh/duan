@extends('fontend.layouts.app')

@section('title', 'Gi·ªè h√†ng')

@section('css')
  <link rel="stylesheet" href="{{ asset('fontend/trangchu.css') }}">
  <style>
    .cart-item-image {
      width: 80px;
      height: 80px;
      object-fit: cover;
      border-radius: 8px;
    }
    .quantity-input {
      width: 80px;
    }
    .cart-empty {
      text-align: center;
      padding: 60px 20px;
    }
    .cart-empty i {
      font-size: 4rem;
      color: #ccc;
      margin-bottom: 20px;
    }
    
    /* CSS cho modal x√≥a ƒë·∫πp */
    .delete-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.6);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 9999;
    }
    
    .delete-modal.show {
      display: flex;
    }
    
    .delete-modal-content {
      background: white;
      border-radius: 15px;
      padding: 30px;
      max-width: 400px;
      width: 90%;
      text-align: center;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
      transform: scale(0.8);
      transition: all 0.3s ease;
    }
    
    .delete-modal.show .delete-modal-content {
      transform: scale(1);
    }
    
    .delete-modal-icon {
      font-size: 60px;
      color: #ff6b6b;
      margin-bottom: 20px;
    }
    
    .delete-modal-title {
      font-size: 24px;
      font-weight: 600;
      color: #333;
      margin-bottom: 15px;
    }
    
    .delete-modal-message {
      font-size: 16px;
      color: #666;
      margin-bottom: 30px;
      line-height: 1.5;
    }
    
    .delete-modal-buttons {
      display: flex;
      gap: 15px;
      justify-content: center;
    }
    
    .btn-confirm-delete {
      background: linear-gradient(135deg, #ff6b6b, #ee5a52);
      color: white;
      border: none;
      border-radius: 8px;
      padding: 12px 25px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .btn-confirm-delete:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(255, 107, 107, 0.4);
    }
    
    .btn-cancel-delete {
      background: #6c757d;
      color: white;
      border: none;
      border-radius: 8px;
      padding: 12px 25px;
      font-size: 16px;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.3s ease;
    }
    
    .btn-cancel-delete:hover {
      background: #5a6268;
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(108, 117, 125, 0.4);
    }
    
    /* CSS cho n√∫t x√≥a t·∫•t c·∫£ */
    .btn-clear-all {
      background: linear-gradient(135deg, #dc3545, #c82333);
      border: none;
      color: white;
      border-radius: 8px;
      padding: 12px 20px;
      font-size: 14px;
      font-weight: 500;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(220, 53, 69, 0.3);
    }
    
    .btn-clear-all:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(220, 53, 69, 0.4);
    }
  </style>
@endsection

@section('content')
<!-- navbar moved to layout -->

<section class="py-5">
  <div class="container">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h2>Gi·ªè h√†ng c·ªßa b·∫°n</h2>
    </div>

    <!-- Cart will be loaded dynamically from localStorage -->
    <div id="cart-empty" class="cart-empty" style="display: none;">
        <i class="fas fa-shopping-cart"></i>
        <h4>Gi·ªè h√†ng tr·ªëng</h4>
        <p class="text-muted">B·∫°n ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong gi·ªè h√†ng</p>
        <a href="{{ route('products') }}" class="btn btn-primary">
          <i class="fas fa-shopping-bag me-2"></i>Ti·∫øp t·ª•c mua s·∫Øm
        </a>
    </div>

    <!-- Load cart from localStorage only -->
    <script>
    // Load cart from localStorage only (no session sync)
    document.addEventListener('DOMContentLoaded', function() {
      console.log('üîÑ Loading cart from localStorage only...');
      
      // Fix zero prices in localStorage first
      fixZeroPricesInLocalStorage();
      
      // Update UI
      updateCartUI();
    });
    </script>

    <div id="cart-content" style="display: none;">
    <div class="table-responsive">
      <table class="table align-middle">
        <thead class="table-light">
            <tr>
              <th>S·∫£n ph·∫©m</th>
                <th>Lo·∫°i</th>
              <th>Gi√°</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>T·∫°m t√≠nh</th>
              <th>Thao t√°c</th>
            </tr>
        </thead>
          <tbody id="cart-items">
              <!-- Cart items will be loaded dynamically -->
        </tbody>
      </table>
    </div>

      <div class="row mt-4">
        <div class="col-md-8">
          <a href="{{ route('products') }}" class="btn btn-outline-primary">
            <i class="fas fa-arrow-left me-2"></i>Ti·∫øp t·ª•c mua s·∫Øm
          </a>
        </div>
        <div class="col-md-4">
          <div class="card">
            <div class="card-body">
              <h5 class="card-title">T·ªïng c·ªông</h5>
              <div class="d-flex justify-content-between">
                <span>T·∫°m t√≠nh:</span>
                <span id="cart-total">0‚Ç´</span>
              </div>
              <hr>
              <div class="d-flex justify-content-between">
                <strong>T·ªïng c·ªông:</strong>
                <strong class="text-danger" id="cart-final-total">0‚Ç´</strong>
              </div>
              <a href="{{ route('checkout') }}" class="btn btn-success w-100 mt-3">
                <i class="fas fa-credit-card me-2"></i>Thanh to√°n
              </a>
            </div>
          </div>
    </div>
    </div>
    </div>
  </div>
</section>

<!-- Modal x√≥a ƒë·∫πp -->
<div id="deleteModal" class="delete-modal">
  <div class="delete-modal-content">
    <div class="delete-modal-icon">
      <i class="fas fa-exclamation-triangle"></i>
      </div>
    <div class="delete-modal-title">X√°c nh·∫≠n x√≥a</div>
    <div class="delete-modal-message" id="deleteModalMessage">
      B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y kh·ªèi gi·ªè h√†ng?
      </div>
    <div class="delete-modal-buttons">
      <button class="btn-confirm-delete" id="confirmDeleteBtn">
        <i class="fas fa-trash me-2"></i>X√≥a
      </button>
      <button class="btn-cancel-delete" onclick="closeDeleteModal()">
        <i class="fas fa-times me-2"></i>H·ªßy
      </button>
      </div>
      </div>
    </div>

@endsection

@section('js')
<!-- Cart API JavaScript -->
<script src="{{ asset('fontend/js/cart/cart-api.js') }}"></script>

<script>
// Function ƒë·ªÉ tƒÉng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
function increaseQuantity(productId, variantId) {
  console.log('increaseQuantity called:', {productId, variantId});
  
  try {
    // Get current cart data
    const cartData = localStorage.getItem('cart_data');
    let cartItems = [];
    
    if (cartData) {
      try {
        cartItems = JSON.parse(cartData);
      } catch (error) {
        console.error('Error parsing cart data:', error);
      }
    }
    
    // Find item
    const itemIndex = cartItems.findIndex(item => 
      item.product_id === productId && item.variant_id === variantId
    );
    
    console.log(`üîç Finding item: productId=${productId}, variantId=${variantId}`);
    console.log(`üîç Cart items:`, cartItems);
    console.log(`üîç Found item index:`, itemIndex);
    
    if (itemIndex !== -1) {
      const currentQuantity = cartItems[itemIndex].quantity;
      const newQuantity = currentQuantity + 1;
      
      console.log(`üîç Current item:`, cartItems[itemIndex]);
      console.log(`üîç Current quantity: ${currentQuantity}, New quantity: ${newQuantity}`);
      
      // Check stock availability
      const stockCheck = checkStockAvailability(productId, variantId, newQuantity);
      if (!stockCheck.available) {
        // Ch·ªâ hi·ªÉn th·ªã notification khi c√≥ message
        if (stockCheck.message) {
          showNotification(stockCheck.message, 'error');
        }
        return;
      }
      
      // Update quantity
      cartItems[itemIndex].quantity = newQuantity;
      localStorage.setItem('cart_data', JSON.stringify(cartItems));
      
      console.log('üîç Updated cart item:', cartItems[itemIndex]);
      console.log('üîç Updated cart data:', JSON.stringify(cartItems));
      
      // Kh√¥ng reduce stock khi tƒÉng quantity trong cart
      // Stock ch·ªâ ƒë∆∞·ª£c reduce khi th√™m t·ª´ product detail page
      
      // Update UI
      updateCartUI();
      updateQuantityDisplay(productId, variantId, newQuantity);
      
      showNotification('ƒê√£ tƒÉng s·ªë l∆∞·ª£ng', 'success');
    } else {
      showNotification('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng', 'error');
    }
    
  } catch (error) {
    console.error('Error increasing quantity:', error);
    showNotification('C√≥ l·ªói x·∫£y ra khi tƒÉng s·ªë l∆∞·ª£ng', 'error');
  }
}

// Function ƒë·ªÉ gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
function decreaseQuantity(productId, variantId) {
  console.log('decreaseQuantity called:', {productId, variantId});
  
  try {
    // Get current cart data
    const cartData = localStorage.getItem('cart_data');
    let cartItems = [];
    
    if (cartData) {
      try {
        cartItems = JSON.parse(cartData);
      } catch (error) {
        console.error('Error parsing cart data:', error);
      }
    }
    
    // Find item
    const itemIndex = cartItems.findIndex(item => 
      item.product_id === productId && item.variant_id === variantId
    );
    
    if (itemIndex !== -1) {
      const currentQuantity = cartItems[itemIndex].quantity;
      
      if (currentQuantity <= 1) {
        // Remove item if quantity is 1
        cartItems.splice(itemIndex, 1);
        localStorage.setItem('cart_data', JSON.stringify(cartItems));
        
        // Restore stock when removing item completely
        restoreStockInLocalStorage(productId, variantId, 1);
        
        updateCartUI();
        showNotification('S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng', 'info');
    return;
  }
  
      const newQuantity = currentQuantity - 1;
      
      // Update quantity
      cartItems[itemIndex].quantity = newQuantity;
      localStorage.setItem('cart_data', JSON.stringify(cartItems));
      
      // Kh√¥ng restore stock khi ch·ªâ gi·∫£m quantity trong cart
      // Stock ch·ªâ ƒë∆∞·ª£c restore khi x√≥a ho√†n to√†n s·∫£n ph·∫©m
      
      // Update UI
      updateCartUI();
      updateQuantityDisplay(productId, variantId, newQuantity);
      
      showNotification('ƒê√£ gi·∫£m s·ªë l∆∞·ª£ng', 'success');
    } else {
      showNotification('S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i trong gi·ªè h√†ng', 'error');
    }
    
  } catch (error) {
    console.error('Error decreasing quantity:', error);
    showNotification('C√≥ l·ªói x·∫£y ra khi gi·∫£m s·ªë l∆∞·ª£ng', 'error');
  }
}

// Function ƒë·ªÉ ki·ªÉm tra stock availability
function checkStockAvailability(productId, variantId, requestedQuantity) {
  const storageKey = `product_stock_${productId}`;
  const stored = localStorage.getItem(storageKey);
  
  console.log(`üîç checkStockAvailability: productId=${productId}, variantId=${variantId}, requested=${requestedQuantity}`);
  console.log(`üîç Storage key: ${storageKey}`);
  console.log(`üîç Stored data:`, stored);
  
  if (!stored) {
    console.log('No stock data found, allowing quantity increase');
    return { available: true, message: '' }; // No stock data, allow update
  }
  
  const stockData = JSON.parse(stored);
  console.log(`üîç Parsed stock data:`, stockData);
  
  let availableStock = 0;
  let stockType = '';
  
  if (variantId && variantId !== 0) {
    // Check variant stock
    const variantKey = `variant_${variantId}`;
    availableStock = stockData.variants?.[variantKey] || 0;
    stockType = 'variant';
    console.log(`üîç Checking VARIANT stock: ${variantKey} = ${availableStock}`);
    console.log(`üîç All variants available:`, stockData.variants);
  } else {
    // Check main product stock
    availableStock = stockData.mainStock || 0;
    stockType = 'main';
    console.log(`üîç Checking MAIN PRODUCT stock: ${availableStock}`);
    console.log(`üîç Full stock data for main product:`, stockData);
  }
  
  console.log(`üîç Final stock check: type=${stockType}, available=${availableStock}, requested=${requestedQuantity}`);
  
  console.log(`üîç Stock check: requested=${requestedQuantity}, available=${availableStock}`);
  
  // Check if completely out of stock
  if (availableStock <= 0) {
    const itemType = variantId && variantId !== 0 ? 'bi·∫øn th·ªÉ' : 's·∫£n ph·∫©m ch√≠nh';
    const message = `S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng! ${itemType} kh√¥ng c√≤n s·∫£n ph·∫©m n√†o.`;
    console.log(`üîç Stock check failed: ${message}`);
    
    // Hi·ªÉn th·ªã th√¥ng b√°o ƒë·∫∑c bi·ªát cho s·∫£n ph·∫©m ch√≠nh h·∫øt h√†ng
    if (!variantId || variantId === 0) {
      showNotification('‚ö†Ô∏è S·∫£n ph·∫©m ch√≠nh ƒë√£ h·∫øt h√†ng! Vui l√≤ng ch·ªçn m√†u s·∫Øc v√† size kh√°c.', 'warning');
    }
    
    return {
      available: false,
      message: message
    };
  }
  
  // Ki·ªÉm tra s·∫£n ph·∫©m ch√≠nh
  if (!variantId || variantId === 0) {
    if (availableStock === 0) {
      console.log(`üîç S·∫£n ph·∫©m ch√≠nh h·∫øt h√†ng ho√†n to√†n (0), t·ª´ ch·ªëi`);
      showNotification('‚ö†Ô∏è S·∫£n ph·∫©m ch√≠nh ƒë√£ h·∫øt h√†ng! Vui l√≤ng ch·ªçn m√†u s·∫Øc v√† size kh√°c.', 'warning');
      return {
        available: false,
        message: 'S·∫£n ph·∫©m ch√≠nh ƒë√£ h·∫øt h√†ng!'
      };
    }
    
    // Ki·ªÉm tra xem c√≥ v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng c√≥ s·∫µn kh√¥ng
    if (requestedQuantity > availableStock) {
      console.log(`üîç S·∫£n ph·∫©m ch√≠nh c√≤n ${availableStock} s·∫£n ph·∫©m, t·ª´ ch·ªëi v∆∞·ª£t qu√°`);
      return {
        available: false,
        message: '' // Kh√¥ng c√≥ message ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã banner
      };
    }
    
    // Cho ph√©p th√™m khi kh√¥ng v∆∞·ª£t qu√°
    console.log(`üîç S·∫£n ph·∫©m ch√≠nh c√≤n ${availableStock} s·∫£n ph·∫©m, cho ph√©p th√™m`);
    return { available: true, message: '' };
  }
  
  // ƒê·ªëi v·ªõi bi·∫øn th·ªÉ, v·∫´n ki·ªÉm tra nh∆∞ c≈©
  if (requestedQuantity > availableStock) {
    const itemType = variantId && variantId !== 0 ? 'bi·∫øn th·ªÉ' : 's·∫£n ph·∫©m ch√≠nh';
    console.log(`üîç Stock check failed: ${itemType} ch·ªâ c√≤n ${availableStock} s·∫£n ph·∫©m`);
    
    return {
      available: false,
      message: '' // Kh√¥ng c√≥ message ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã banner
    };
  }
  
  // Cho ph√©p th√™m khi s·ªë l∆∞·ª£ng hi·ªán t·∫°i b·∫±ng s·ªë l∆∞·ª£ng c√≥ s·∫µn
  if (requestedQuantity === availableStock) {
    console.log(`üîç S·ªë l∆∞·ª£ng hi·ªán t·∫°i (${requestedQuantity}) b·∫±ng s·ªë l∆∞·ª£ng c√≥ s·∫µn (${availableStock}), cho ph√©p th√™m`);
    return { available: true, message: '' };
  }
  
  console.log('üîç Stock check passed');
  return { available: true, message: '' };
}

// Function ƒë·ªÉ c·∫≠p nh·∫≠t hi·ªÉn th·ªã quantity
function updateQuantityDisplay(productId, variantId, quantity) {
  const row = document.querySelector(`tr[data-product-id="${productId}"][data-variant-id="${variantId}"]`);
  if (!row) return;
  
  const quantityInput = row.querySelector('input[type="number"]');
  if (quantityInput) {
    quantityInput.value = quantity;
  }
  
  // Update button states
  const minusBtn = row.querySelector('.quantity-minus');
  const plusBtn = row.querySelector('.quantity-plus');
  
  if (minusBtn) {
    if (quantity <= 1) {
      minusBtn.style.display = 'none';
      minusBtn.disabled = true;
    } else {
      minusBtn.style.display = 'inline-block';
    minusBtn.disabled = false;
    }
  }
  
  if (plusBtn) {
    // Always enable plus button - let increaseQuantity handle stock validation
    plusBtn.style.display = 'inline-block';
    plusBtn.disabled = false;
  }
}

// Bi·∫øn l∆∞u th√¥ng tin s·∫£n ph·∫©m c·∫ßn x√≥a
let deleteProductId = null;
let deleteVariantId = null;

// Hi·ªÉn th·ªã modal x√°c nh·∫≠n x√≥a
function showDeleteModal(productId, variantId) {
  console.log('showDeleteModal called:', { productId, variantId });
  
  deleteProductId = productId;
  deleteVariantId = variantId;
  
  const modal = document.querySelector('.delete-modal');
  if (modal) {
    modal.classList.add('show');
  }
}

// ƒê√≥ng modal x√≥a
function closeDeleteModal() {
  const modal = document.querySelector('.delete-modal');
  if (modal) {
    modal.classList.remove('show');
  }
  
  deleteProductId = null;
  deleteVariantId = null;
}

// X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng - localStorage only
function removeFromCart(productId, variantId) {
  try {
    console.log('üóëÔ∏è Removing item:', { productId, variantId });
    
    // Get current cart data
    const cartData = localStorage.getItem('cart_data');
    let cartItems = [];
    
    if (cartData) {
      try {
        cartItems = JSON.parse(cartData);
        console.log('üîç Current cart items:', cartItems);
      } catch (error) {
        console.error('Error parsing cart data:', error);
      }
    }
    
    // Remove item
    const originalLength = cartItems.length;
    cartItems = cartItems.filter(item => 
      !(item.product_id === productId && item.variant_id === variantId)
    );
    
    console.log('üîç Items before:', originalLength, 'Items after:', cartItems.length);
    
    localStorage.setItem('cart_data', JSON.stringify(cartItems));
    console.log('‚úÖ Item removed from localStorage');
    
    // Update UI
    updateCartUI();
    showNotification('ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng', 'success');
    
  } catch (error) {
    console.error('Error removing from cart:', error);
    showNotification('C√≥ l·ªói x·∫£y ra khi x√≥a s·∫£n ph·∫©m', 'error');
  }
}

// X√≥a to√†n b·ªô gi·ªè h√†ng - localStorage only
function clearCart() {
  try {
    console.log('üóëÔ∏è Clearing entire cart...');
    
    // Clear cart data
    localStorage.setItem('cart_data', JSON.stringify([]));
    console.log('‚úÖ Cart cleared from localStorage');
    
    // Update UI
    updateCartUI();
    showNotification('ƒê√£ x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng', 'success');
    
  } catch (error) {
    console.error('Error clearing cart:', error);
    showNotification('C√≥ l·ªói x·∫£y ra khi x√≥a gi·ªè h√†ng', 'error');
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t s·ªë l∆∞·ª£ng
// Function n√†y ƒë√£ ƒë∆∞·ª£c thay th·∫ø b·∫±ng updateQuantityDisplay

// Render cart items HTML t·ª´ localStorage
function renderCartItems() {
  console.log('renderCartItems called');
  
  try {
    // Get cart data from localStorage
    const cartData = localStorage.getItem('cart_data');
    let cartItems = [];
    
    if (cartData) {
      try {
        cartItems = JSON.parse(cartData);
        console.log('üîç Cart items in renderCartItems:', cartItems);
      } catch (error) {
        console.error('Error parsing cart data:', error);
      }
    }
    
    const cartItemsContainer = document.getElementById('cart-items');
    const cartEmptyDiv = document.getElementById('cart-empty');
    const cartContentDiv = document.getElementById('cart-content');
    
    if (!cartItemsContainer) {
      console.error('Cart items container not found');
      return;
    }
    
    // Clear existing content
    cartItemsContainer.innerHTML = '';
    
    if (cartItems.length === 0) {
      // Show empty cart
      if (cartEmptyDiv) cartEmptyDiv.style.display = 'block';
      if (cartContentDiv) cartContentDiv.style.display = 'none';
      return;
    }
    
    // Hide empty cart, show content
    if (cartEmptyDiv) cartEmptyDiv.style.display = 'none';
    if (cartContentDiv) cartContentDiv.style.display = 'block';
    
    // Render each cart item
    cartItems.forEach(item => {
      console.log('üîç Rendering item:', item);
      
      const row = document.createElement('tr');
      row.setAttribute('data-product-id', item.product_id);
      row.setAttribute('data-variant-id', item.variant_id || '');
      
      // Ensure price is a number
      const price = parseFloat(item.price) || 0;
      const quantity = parseInt(item.quantity) || 1;
      const subtotal = price * quantity;
      
      console.log('üîç Price calculation:', { 
        originalPrice: item.price, 
        parsedPrice: price, 
        quantity: quantity, 
        subtotal: subtotal 
      });
      
      row.innerHTML = `
        <td>
          <div class="d-flex align-items-center">
            <img src="${item.image || '/images/no-image.png'}" 
                 class="cart-item-image me-3" 
                 alt="${item.product_name || 'S·∫£n ph·∫©m'}"
                 onerror="this.src='/images/no-image.png'">
            <div>
              <h6 class="mb-1">${item.product_name || 'S·∫£n ph·∫©m'}</h6>
              <small class="text-muted">S·∫£n ph·∫©m g·ªëc</small>
            </div>
          </div>
        </td>
        <td>
          <span class="badge bg-primary">S·∫£n ph·∫©m ch√≠nh</span>
        </td>
        <td>
          <span class="text-warning fw-bold">${formatPrice(price)}</span>
        </td>
        <td>
          <div class="quantity-controls d-flex align-items-center">
            <button class="btn btn-sm btn-outline-secondary quantity-minus" 
                    onclick="decreaseQuantity(${item.product_id}, ${item.variant_id || 'null'})"
                    ${item.quantity <= 1 ? 'style="display:none"' : ''}>
              <i class="fas fa-minus"></i>
            </button>
            <input type="number" class="form-control quantity-input text-center" 
                   value="${quantity}" min="1" readonly>
            <button class="btn btn-sm btn-outline-secondary quantity-plus" 
                    onclick="increaseQuantity(${item.product_id}, ${item.variant_id || 'null'})">
              <i class="fas fa-plus"></i>
            </button>
          </div>
        </td>
        <td>
          <span class="fw-bold">${formatPrice(subtotal)}</span>
        </td>
        <td>
          <button class="btn btn-sm btn-outline-danger" 
                  onclick="showDeleteModal(${item.product_id}, ${item.variant_id || 'null'})"
                  title="X√≥a s·∫£n ph·∫©m">
            <i class="fas fa-trash"></i>
          </button>
        </td>
      `;
      
      cartItemsContainer.appendChild(row);
    });
    
    console.log('‚úÖ Cart items rendered successfully');
    
  } catch (error) {
    console.error('Error in renderCartItems:', error);
  }
}

// C·∫≠p nh·∫≠t giao di·ªán gi·ªè h√†ng
function updateCartUI() {
  console.log('updateCartUI called');
  
  try {
    // Render cart items first
    renderCartItems();
    
    // Get cart data from localStorage
    const cartData = localStorage.getItem('cart_data');
    let cartItems = [];
    
    if (cartData) {
      try {
        cartItems = JSON.parse(cartData);
        console.log('üîç Cart items in updateCartUI:', cartItems);
      } catch (error) {
        console.error('Error parsing cart data:', error);
      }
    }
    
    // Calculate totals
    const totalQuantity = cartItems.reduce((sum, item) => sum + item.quantity, 0);
    const totalPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    
    console.log('üîç Cart totals:', { totalQuantity, totalPrice, cartItems });
    
    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
      const cartTotalElement = document.getElementById('cart-total');
      const cartFinalTotalElement = document.getElementById('cart-final-total');
      
      if (cartTotalElement) {
      cartTotalElement.textContent = formatPrice(totalPrice);
      }
      if (cartFinalTotalElement) {
      cartFinalTotalElement.textContent = formatPrice(totalPrice);
    }
    
    // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng gi·ªè h√†ng trong header (n·∫øu c√≥)
    const cartCountElement = document.querySelector('.cart-count');
    if (cartCountElement) {
      cartCountElement.textContent = totalQuantity;
    }
    
    // Check if cart is empty and show notification
    if (totalQuantity === 0) {
      showNotification('Gi·ªè h√†ng ƒë√£ tr·ªëng!', 'info');
    }
    
  } catch (error) {
    console.error('Error in updateCartUI:', error);
  }
}

// Format gi√° ti·ªÅn
function formatPrice(price) {
  return new Intl.NumberFormat('vi-VN').format(price) + '‚Ç´';
}

// S·ª≠a gi√° 0 trong localStorage
function fixZeroPricesInLocalStorage() {
  try {
    const cartData = localStorage.getItem('cart_data');
    if (!cartData) return;
    
    let cartItems = JSON.parse(cartData);
    let hasZeroPrice = false;
    
    cartItems.forEach(item => {
      if (!item.price || item.price === 0) {
        console.log('üîß Fixing zero price for item:', item);
        
        // Set default price based on product_id
        // Common prices for different product types
        const defaultPrices = {
          1: 500000,   // Product 1: 500k
          2: 300000,   // Product 2: 300k  
          3: 400000,   // Product 3: 400k
          4: 600000,   // Product 4: 600k
          5: 350000,   // Product 5: 350k
          6: 450000,   // Product 6: 450k
          7: 550000,   // Product 7: 550k
          8: 250000,   // Product 8: 250k
          9: 700000,   // Product 9: 700k
          10: 200000   // Product 10: 200k
        };
        
        item.price = defaultPrices[item.product_id] || 500000; // Default 500k
        hasZeroPrice = true;
        
        console.log('‚úÖ Fixed price for item:', item);
      }
    });
    
    if (hasZeroPrice) {
      localStorage.setItem('cart_data', JSON.stringify(cartItems));
      console.log('‚úÖ Fixed zero prices in localStorage');
    }
    
  } catch (error) {
    console.error('Error fixing zero prices:', error);
  }
}


// Hi·ªÉn th·ªã modal x√≥a
function showDeleteModal() {
  document.getElementById('deleteModal').classList.add('show');
}

// ƒê√≥ng modal x√≥a
function closeDeleteModal() {
  document.getElementById('deleteModal').classList.remove('show');
}

// X√°c nh·∫≠n x√≥a
function confirmDelete() {
  if (deleteProductId !== null && deleteVariantId !== null) {
    // X√≥a s·∫£n ph·∫©m c·ª• th·ªÉ t·ª´ localStorage
    removeFromCart(deleteProductId, deleteVariantId);
  } else {
    // X√≥a to√†n b·ªô gi·ªè h√†ng t·ª´ localStorage
    clearCart();
  }
  closeDeleteModal();
}

// Th·ª±c hi·ªán x√≥a s·∫£n ph·∫©m
function performDelete() {
  fetch('/cart/remove', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    },
    body: JSON.stringify({
      product_id: deleteProductId,
      variant_id: deleteVariantId
    })
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // X√≥a s·∫£n ph·∫©m kh·ªèi giao di·ªán ngay l·∫≠p t·ª©c
      const row = document.querySelector(`tr[data-product-id="${deleteProductId}"][data-variant-id="${deleteVariantId}"]`);
      if (row) {
        row.remove();
      }
      
      // Ki·ªÉm tra n·∫øu gi·ªè h√†ng tr·ªëng
      const remainingRows = document.querySelectorAll('tbody tr');
      if (remainingRows.length === 0) {
        location.reload(); // Reload ƒë·ªÉ hi·ªÉn th·ªã trang gi·ªè h√†ng tr·ªëng
        return;
      }
      
      updateCartUI(data);
      showNotification(data.message, 'success');
    } else {
      showNotification(data.message, 'error');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showNotification('C√≥ l·ªói x·∫£y ra!', 'error');
  });
}

// Th·ª±c hi·ªán x√≥a to√†n b·ªô gi·ªè h√†ng
function performClearCart() {
  fetch('/cart/clear', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
    }
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      updateCartUI(data);
      showNotification(data.message, 'success');
    } else {
      showNotification(data.message, 'error');
    }
  })
  .catch(error => {
    console.error('Error:', error);
    showNotification('C√≥ l·ªói x·∫£y ra!', 'error');
  });
}

// ƒê√≥ng modal khi click b√™n ngo√†i
document.getElementById('deleteModal').addEventListener('click', function(e) {
  if (e.target === this) {
    closeDeleteModal();
  }
});

// G√°n function confirmDelete cho n√∫t x√°c nh·∫≠n
document.getElementById('confirmDeleteBtn').addEventListener('click', confirmDelete);

// C·∫≠p nh·∫≠t tr·∫°ng th√°i n√∫t s·ªë l∆∞·ª£ng khi trang load
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOMContentLoaded: Initializing button states...');
  
  // Auto-sync stock data from product detail
  setTimeout(() => {
    console.log('üîÑ Auto-syncing stock data...');
    syncStockFromProductDetail();
  }, 1000);
  
  // Force reset stock data after 2 seconds to ensure correct values
  setTimeout(() => {
    console.log('üîÑ Force resetting stock data...');
    forceResetStockCompletely();
  }, 2000);
  
  // Delay to avoid conflicts with cart-api.js initialization
  setTimeout(() => {
  const quantityRows = document.querySelectorAll('tr[data-product-id]');
    console.log('Found quantity rows:', quantityRows.length);
    
  quantityRows.forEach(row => {
    const productId = row.getAttribute('data-product-id');
    const variantId = row.getAttribute('data-variant-id');
    const quantityInput = row.querySelector('input[type="number"]');
    if (quantityInput) {
      const quantity = parseInt(quantityInput.value);
        console.log('Initializing buttons for:', {productId, variantId, quantity});
        updateQuantityDisplay(productId, variantId, quantity);
      }
    });
  }, 500); // Wait for cart-api.js to finish
});

// Function ƒë·ªÉ reset stock data (debug)
function resetStockData() {
  const storageKey = 'product_stock_106';
  localStorage.removeItem(storageKey);
  console.log('Stock data reset for product 106');
  showNotification('Stock data ƒë√£ ƒë∆∞·ª£c reset', 'info');
}

// Function ƒë·ªÉ t·∫°o stock data m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß variants (debug)
function createNewStockData() {
  const storageKey = 'product_stock_106';
  
  // T·∫°o stock data m·ªõi v·ªõi ƒë·∫ßy ƒë·ªß variants
  const newStockData = {
    mainStock: 10, // Gi·∫£ s·ª≠ c√≥ 10 s·∫£n ph·∫©m ch√≠nh
    variants: {
      variant_136: 10, // ƒê·ªè - 38
      variant_137: 10, // ƒê·ªè - 39  
      variant_138: 10, // ƒê·ªè - 40
      variant_139: 10, // Xanh - 38
      variant_140: 10  // Xanh - 39
    }
  };
  
  localStorage.setItem(storageKey, JSON.stringify(newStockData));
  console.log('New stock data created:', newStockData);
  showNotification('Stock data m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi ƒë·∫ßy ƒë·ªß variants', 'success');
}

// Function ƒë·ªÉ reset stock data v·ªÅ gi√° tr·ªã ban ƒë·∫ßu
function resetStockToOriginal() {
  const storageKey = 'product_stock_106';
  
  // L·∫•y cart data hi·ªán t·∫°i ƒë·ªÉ t√≠nh to√°n stock ƒë√∫ng
  const cartData = localStorage.getItem('cart_data');
  let cartItems = [];
  if (cartData) {
    try {
      cartItems = JSON.parse(cartData);
    } catch (error) {
      console.error('Error parsing cart data:', error);
    }
  }
  
  // T√≠nh to√°n stock d·ª±a tr√™n cart hi·ªán t·∫°i
  let mainStockUsed = 0;
  let variantStockUsed = {};
  
  cartItems.forEach(item => {
    if (item.variant_id && item.variant_id !== 0) {
      const variantKey = `variant_${item.variant_id}`;
      variantStockUsed[variantKey] = (variantStockUsed[variantKey] || 0) + item.quantity;
    } else {
      mainStockUsed += item.quantity;
    }
  });
  
  console.log('üìä Cart analysis:', {
    mainStockUsed,
    variantStockUsed,
    cartItems: cartItems.map(item => ({id: item.product_id, variant: item.variant_id, qty: item.quantity}))
  });
  
  // Reset v·ªÅ gi√° tr·ªã ban ƒë·∫ßu nh∆∞ng tr·ª´ ƒëi s·ªë l∆∞·ª£ng ƒë√£ d√πng trong cart
  const originalStockData = {
    mainStock: Math.max(0, 10 - mainStockUsed), // 10 - s·ªë l∆∞·ª£ng ƒë√£ d√πng
    variants: {
      variant_136: Math.max(0, 10 - (variantStockUsed.variant_136 || 0)),
      variant_137: Math.max(0, 10 - (variantStockUsed.variant_137 || 0)),
      variant_138: Math.max(0, 10 - (variantStockUsed.variant_138 || 0)),
      variant_139: Math.max(0, 10 - (variantStockUsed.variant_139 || 0)),
      variant_140: Math.max(0, 10 - (variantStockUsed.variant_140 || 0))
    }
  };
  
  localStorage.setItem(storageKey, JSON.stringify(originalStockData));
  console.log('Stock data reset to original (adjusted for cart):', originalStockData);
  // B·ªè th√¥ng b√°o toast ƒë·ªÉ kh√¥ng l√†m phi·ªÅn ng∆∞·ªùi d√πng
  
  // Reload cart ƒë·ªÉ √°p d·ª•ng stock data m·ªõi
  if (window.cartAPIManager) {
    window.cartAPIManager.renderCartItems();
  }
}

// Function ƒë·ªÉ sync stock data t·ª´ product detail page
function syncStockFromProductDetail() {
  console.log('üîÑ Syncing stock data from product detail...');
  
  // L·∫•y t·∫•t c·∫£ product IDs t·ª´ cart
  const cartData = localStorage.getItem('cart_data');
  if (!cartData) return;
  
  const cartItems = JSON.parse(cartData);
  const productIds = [...new Set(cartItems.map(item => item.product_id))];
  
  productIds.forEach(productId => {
    const productDetailStock = localStorage.getItem(`product_stock_${productId}`);
    
    if (productDetailStock) {
      const stockData = JSON.parse(productDetailStock);
      console.log(`üì¶ Found product detail stock data for product ${productId}:`, stockData);
      
      // Gi·ªØ nguy√™n stock data t·ª´ product detail
      const completeStockData = {
        mainStock: stockData.mainStock || 0,
        variants: stockData.variants || {}
      };
      
      console.log(`üì¶ Complete stock data for product ${productId}:`, completeStockData);
      
      // Ki·ªÉm tra v√† th√¥ng b√°o n·∫øu s·∫£n ph·∫©m ch√≠nh h·∫øt h√†ng
      if (completeStockData.mainStock === 0) {
        showNotification('‚ö†Ô∏è S·∫£n ph·∫©m ch√≠nh ƒë√£ h·∫øt h√†ng! Vui l√≤ng ch·ªçn m√†u s·∫Øc v√† size kh√°c.', 'warning');
      }
      
      // C·∫≠p nh·∫≠t stock data cho cart
      localStorage.setItem(`product_stock_${productId}`, JSON.stringify(completeStockData));
      
      console.log(`‚úÖ Stock data synced for product ${productId}`);
    } else {
      console.log(`‚ùå No product detail stock data found for product ${productId}`);
    }
  });
  
  // Reload cart ƒë·ªÉ √°p d·ª•ng stock data m·ªõi
  if (window.cartAPIManager) {
    window.cartAPIManager.renderCartItems();
  }
}

// Function ƒë·ªÉ reduce stock khi tƒÉng quantity
function reduceStockInLocalStorage(productId, variantId, quantity) {
  console.log(`üìâ Reducing stock: productId=${productId}, variantId=${variantId}, quantity=${quantity}`);
  
  const storageKey = `product_stock_${productId}`;
  const stored = localStorage.getItem(storageKey);
  
  if (stored) {
    const stockData = JSON.parse(stored);
    
    if (variantId && variantId !== 0) {
      // Reduce variant stock
      const variantKey = `variant_${variantId}`;
      if (stockData.variants && stockData.variants[variantKey] !== undefined) {
        stockData.variants[variantKey] = Math.max(0, stockData.variants[variantKey] - quantity);
        console.log(`üìâ Reduced variant ${variantKey}: -${quantity} = ${stockData.variants[variantKey]}`);
      }
    } else {
      // Reduce main product stock
      stockData.mainStock = Math.max(0, stockData.mainStock - quantity);
      console.log(`üìâ Reduced main product: -${quantity} = ${stockData.mainStock}`);
    }
    
    localStorage.setItem(storageKey, JSON.stringify(stockData));
    console.log('üìâ Stock reduced:', stockData);
  } else {
    console.log('‚ùå No stock data found to reduce');
  }
}

// Function ƒë·ªÉ restore stock khi gi·∫£m quantity
function restoreStockInLocalStorage(productId, variantId, quantity) {
  console.log(`üîÑ Restoring stock: productId=${productId}, variantId=${variantId}, quantity=${quantity}`);
  
  const storageKey = `product_stock_${productId}`;
  const stored = localStorage.getItem(storageKey);
  
  if (stored) {
    const stockData = JSON.parse(stored);
    
    if (variantId && variantId !== 0) {
      // Restore variant stock
      const variantKey = `variant_${variantId}`;
      if (stockData.variants && stockData.variants[variantKey] !== undefined) {
        stockData.variants[variantKey] += quantity;
        console.log(`üîÑ Restored variant ${variantKey}: +${quantity} = ${stockData.variants[variantKey]}`);
      }
    } else {
      // Restore main product stock
      stockData.mainStock += quantity;
      console.log(`üîÑ Restored main product: +${quantity} = ${stockData.mainStock}`);
    }
    
    localStorage.setItem(storageKey, JSON.stringify(stockData));
    console.log('üîÑ Stock restored:', stockData);
  } else {
    console.log('‚ùå No stock data found to restore');
  }
}

// Function ƒë·ªÉ xem stock data hi·ªán t·∫°i (debug)
function viewStockData() {
  // L·∫•y t·∫•t c·∫£ product IDs t·ª´ cart
  const cartData = localStorage.getItem('cart_data');
  if (!cartData) {
    showNotification('No cart data found', 'info');
    return;
  }
  
  const cartItems = JSON.parse(cartData);
  const productIds = [...new Set(cartItems.map(item => item.product_id))];
  
  console.log('Cart product IDs:', productIds);
  
  productIds.forEach(productId => {
    const storageKey = `product_stock_${productId}`;
    const stored = localStorage.getItem(storageKey);
    console.log(`Product ${productId} stock data:`, stored);
    
    if (stored) {
      const stockData = JSON.parse(stored);
      console.log(`Product ${productId} parsed stock data:`, stockData);
      showNotification(`Product ${productId}: Main=${stockData.mainStock}, Variants=${JSON.stringify(stockData.variants)}`, 'info');
    } else {
      showNotification(`Product ${productId}: No stock data found`, 'info');
    }
  });
}

// Function ƒë·ªÉ debug cart data v√† stock data
function debugCartData() {
  console.log('üîç Debugging cart data...');
  
  // L·∫•y cart data
  const cartData = localStorage.getItem('cart_data');
  if (!cartData) {
    console.log('‚ùå No cart data found');
    showNotification('No cart data found', 'error');
    return;
  }
  
  const cartItems = JSON.parse(cartData);
  console.log('üîç Cart items:', cartItems);
  
  // Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng item
  cartItems.forEach((item, index) => {
    console.log(`üîç Item ${index}:`, {
      product_id: item.product_id,
      variant_id: item.variant_id,
      quantity: item.quantity,
      price: item.price,
      total: item.price * item.quantity
    });
  });
  
  // T√≠nh t·ªïng
  const totalQuantity = cartItems.reduce((sum, item) => sum + item.quantity, 0);
  const totalPrice = cartItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);
  
  console.log('üîç Cart totals:', { totalQuantity, totalPrice });
  showNotification(`Cart: ${totalQuantity} items, Total: ${formatPrice(totalPrice)}`, 'info');
  
  // Debug stock data
  const productIds = [...new Set(cartItems.map(item => item.product_id))];
  console.log('üîç Cart product IDs:', productIds);
  
  productIds.forEach(productId => {
    const storageKey = `product_stock_${productId}`;
    const stored = localStorage.getItem(storageKey);
    
    console.log(`üîç Product ${productId} stock data:`, stored);
    
    if (stored) {
      const stockData = JSON.parse(stored);
      console.log(`üîç Product ${productId} parsed stock data:`, stockData);
      console.log(`üîç Product ${productId} mainStock:`, stockData.mainStock);
      console.log(`üîç Product ${productId} variants:`, stockData.variants);
    } else {
      console.log(`‚ùå Product ${productId}: No stock data found`);
    }
  });
}

// Function ƒë·ªÉ debug stock data v√† force sync
function debugStockData() {
  console.log('üîç Debugging stock data...');
  
  // L·∫•y t·∫•t c·∫£ product IDs t·ª´ cart
  const cartData = localStorage.getItem('cart_data');
  if (!cartData) {
    console.log('‚ùå No cart data found');
    return;
  }
  
  const cartItems = JSON.parse(cartData);
  const productIds = [...new Set(cartItems.map(item => item.product_id))];
  
  console.log('üîç Cart product IDs:', productIds);
  
  productIds.forEach(productId => {
    const storageKey = `product_stock_${productId}`;
    const stored = localStorage.getItem(storageKey);
    
    console.log(`üîç Product ${productId} stock data:`, stored);
    
    if (stored) {
      const stockData = JSON.parse(stored);
      console.log(`üîç Product ${productId} parsed stock data:`, stockData);
      console.log(`üîç Product ${productId} mainStock:`, stockData.mainStock);
      console.log(`üîç Product ${productId} variants:`, stockData.variants);
    } else {
      console.log(`‚ùå Product ${productId}: No stock data found`);
    }
  });
  
  // Force sync t·ª´ product detail
  console.log('üîÑ Force syncing from product detail...');
  syncStockFromProductDetail();
}

// Function ƒë·ªÉ force reset stock data ngay l·∫≠p t·ª©c
function forceResetStock() {
  console.log('üîÑ Force resetting stock data immediately...');
  resetStockToOriginal();
  // B·ªè th√¥ng b√°o toast ƒë·ªÉ kh√¥ng l√†m phi·ªÅn ng∆∞·ªùi d√πng
}

// Function ƒë·ªÉ ki·ªÉm tra v√† s·ª≠a stock data cho s·∫£n ph·∫©m ch√≠nh
function fixMainProductStock() {
  const storageKey = 'product_stock_106';
  const stored = localStorage.getItem(storageKey);
  
  if (stored) {
    const stockData = JSON.parse(stored);
    console.log('üîß Current stock data before fix:', stockData);
    
    // Force set main product stock to 10
    stockData.mainStock = 10;
    
    localStorage.setItem(storageKey, JSON.stringify(stockData));
    console.log('üîß Fixed main product stock:', stockData);
    // B·ªè th√¥ng b√°o toast ƒë·ªÉ kh√¥ng l√†m phi·ªÅn ng∆∞·ªùi d√πng
  } else {
    console.log('‚ùå No stock data found to fix');
    showNotification('Kh√¥ng t√¨m th·∫•y stock data ƒë·ªÉ s·ª≠a', 'error');
  }
}

// Function ƒë·ªÉ debug cart v√† stock data
function debugCartAndStock() {
  console.log('üîç === DEBUG CART AND STOCK ===');
  
  // Debug cart data
  const cartData = localStorage.getItem('cart_data');
  let cartItems = [];
  if (cartData) {
    try {
      cartItems = JSON.parse(cartData);
    } catch (error) {
      console.error('Error parsing cart data:', error);
    }
  }
  
  console.log('üõí Current cart items:', cartItems.map(item => ({
    product_id: item.product_id,
    variant_id: item.variant_id,
    quantity: item.quantity,
    name: item.name
  })));
  
  // Debug stock data
  const storageKey = 'product_stock_106';
  const stored = localStorage.getItem(storageKey);
  if (stored) {
    const stockData = JSON.parse(stored);
    console.log('üì¶ Current stock data:', stockData);
    
    // T√≠nh to√°n stock ƒë√∫ng
    let mainStockUsed = 0;
    let variantStockUsed = {};
    
    cartItems.forEach(item => {
      if (item.variant_id && item.variant_id !== 0) {
        const variantKey = `variant_${item.variant_id}`;
        variantStockUsed[variantKey] = (variantStockUsed[variantKey] || 0) + item.quantity;
      } else {
        mainStockUsed += item.quantity;
      }
    });
    
    console.log('üìä Stock calculation:', {
      mainStockUsed,
      variantStockUsed,
      expectedMainStock: Math.max(0, 10 - mainStockUsed),
      expectedVariant137: Math.max(0, 10 - (variantStockUsed.variant_137 || 0))
    });
  }
  
  console.log('üîç === END DEBUG ===');
}

// Function ƒë·ªÉ force reset stock v·ªÅ gi√° tr·ªã ban ƒë·∫ßu ho√†n to√†n
function forceResetStockCompletely() {
  console.log('üîÑ Force resetting stock data...');
  
  // L·∫•y t·∫•t c·∫£ product IDs t·ª´ cart
  const cartData = localStorage.getItem('cart_data');
  if (!cartData) return;
  
  const cartItems = JSON.parse(cartData);
  const productIds = [...new Set(cartItems.map(item => item.product_id))];
  
  productIds.forEach(productId => {
    const storageKey = `product_stock_${productId}`;
    
    // L·∫•y stock data g·ªëc t·ª´ product detail page
    const productDetailStock = localStorage.getItem(storageKey);
    if (productDetailStock) {
      const originalStockData = JSON.parse(productDetailStock);
      console.log(`üîÑ Resetting stock for product ${productId} to original:`, originalStockData);
      
      // Ki·ªÉm tra v√† th√¥ng b√°o n·∫øu s·∫£n ph·∫©m ch√≠nh h·∫øt h√†ng
      if (originalStockData.mainStock === 0) {
        showNotification('‚ö†Ô∏è S·∫£n ph·∫©m ch√≠nh ƒë√£ h·∫øt h√†ng! Vui l√≤ng ch·ªçn m√†u s·∫Øc v√† size kh√°c.', 'warning');
      }
      
      // Reset v·ªÅ gi√° tr·ªã g·ªëc t·ª´ product detail
      localStorage.setItem(storageKey, JSON.stringify(originalStockData));
    } else {
      console.log(`‚ùå No original stock data found for product ${productId}`);
    }
  });
  
  // Reload cart ƒë·ªÉ √°p d·ª•ng stock data m·ªõi
  if (window.cartAPIManager) {
    window.cartAPIManager.renderCartItems();
  }
}

// Function hi·ªÉn th·ªã th√¥ng b√°o
function showNotification(message, type = 'info') {
  // T·∫°o toast notification
  const toast = document.createElement('div');
  toast.className = `toast-notification toast-${type}`;
  toast.innerHTML = `
    <div class="toast-content">
      <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'}"></i>
      <span>${message}</span>
  </div>
  `;
  
  // Th√™m CSS cho toast
  toast.style.cssText = `
    position: fixed;
    top: 100px;
    right: 20px;
    background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : type === 'warning' ? '#ffc107' : '#17a2b8'};
    color: ${type === 'warning' ? '#000' : 'white'};
    padding: 15px 20px;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    z-index: 99999;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    max-width: 300px;
    font-size: 14px;
  `;
  
  document.body.appendChild(toast);
  
  // Animation hi·ªán
  setTimeout(() => {
    toast.style.transform = 'translateX(0)';
  }, 100);
  
  // T·ª± ƒë·ªông x√≥a sau 3 gi√¢y - th√¥ng b√°o warning hi·ªÉn th·ªã l√¢u h∆°n
  const displayTime = type === 'warning' ? 5000 : 3000;
  setTimeout(() => {
    toast.style.transform = 'translateX(100%)';
    setTimeout(() => {
      if (toast.parentElement) {
        toast.remove();
      }
    }, 300);
  }, displayTime);
}
</script>
@endsection


